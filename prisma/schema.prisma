// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRoles {
  ADMIN
  LIBRARIAN
  STUDENT
  TEACHER
  GRADUATE
}

enum RequestType {
  PENDING
  DISAPPROVED
  FORPICKUP
  RELEASED
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  username       String?         @unique
  password       String
  role           UserRoles
  profile        Profile?
  borrowedBooks  BorrowedBook[]
  borrowRequests BorrowRequest[]
  status         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Profile {
  id             Int     @unique
  fullname       String?
  profilePhoto   String?
  profilePhotoId String?
  department     String?
  course         String?
  college        String?
  mobile         String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int     @unique
}

model Author {
  id        Int       @id @default(autoincrement())
  name      String
  status    Boolean   @default(true)
  books     Book[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  status    Boolean
  books     Book[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model Book {
  id             Int             @id @default(autoincrement())
  isbn           String          @unique
  name           String
  bookCover      String?
  bookCoverId    String?
  author         Author          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       Int
  category       Category[]
  copies         Int             @default(1)
  borrowedBy     BorrowedBook[]
  borrowRequests BorrowRequest[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([authorId])
}

model BorrowRequest {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  book         Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       Int
  requestDate  DateTime    @default(now())
  returnedDate DateTime?
  status       RequestType @default(PENDING)
  isCancelled  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([bookId])
}

model BorrowedBook {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  book         Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       Int
  dueDate      DateTime
  returnedDate DateTime?
  lateFee      Float     @default(0)
  isReturn     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([bookId])
}

model BorrowedBookFee {
  id               Int      @id @default(autoincrement())
  initialFee       Float
  followingDateFee Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
